When would you want to use a remote repository rather than keeping all
your work local?

   (1) When I want other people to make contributions, or, at least, see it.
   (2) To have a safe copy out on the GitHub site, to reduce the risk of
       losing something.


Why might you want to always pull changes manually rather than having
Git automatically stay up-to-date with your remote repository?

   To avoid having things change out from under me without realizing it.


Describe the differences between forks, clones, and branches.  When
would you use one instead of another?

   fork is a feature on the GitHub for creating your own copy of another
   user's repository that's also on GitHub.  Used only on GitHub.
   clone gives you a local copy of another repository, which might also
   be local, or on GitHub, or elsewhere.  Used for doing local work.
   A branch is a label for a linear subset of the commits in a repository.
   Used for segregating commits to keep different threads of work apart.


What is the benefit of having a copy of the last known state of the
remote stored locally?

   You can tell it local is out-of-date, or remote, or if they're even
   out-of-sync with respect to each other due to commit conflicts.


How would you collaborate without using Git or GitHub? What would be
easier, and what would be harder?

   Master copy in a shared file system (e.g. NFS).
   Changes (large and small) in separate copies, also on NFS for reviews.
   Explicit chat w/collaborators to keep straight who's changing what, when.

   Work in this way tends to be more segregated, with each person owning
   certain parts of the project and only they make changes in their part.
   There are few conflicts because each person just does their own job.
   The conflicts created by interface changes are the biggest problem, and
   these are usually resolved by serially, with the owner of the support
   of the API handing the new interface definition to the owners of the
   code that consumes the API.
   This workflow tends to involve more up-front design and agreement on
   breakdown of tasks, with areas of contention reduced to well-defined and
   thought-out APIs.

   Without any version control, all of the problems of doing essentially all
   of the work of keeping changes straight, different versions, saving old
   versions, etc, are there.
   Also, any collaboration becomes exponentially more difficult as the
   size of the group grows and especially when there are no well-defined
   barriers between one person's work and another's.
